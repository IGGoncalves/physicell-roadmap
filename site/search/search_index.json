{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to this wiki! We will be going through how to start your journey with PhysiCell. PhysiCell is an open-source, agent-based modelling framework for 3-D multicellular simulations . It is written in C++ and it comes with multiple code examples that will help you understand how to build your own model. There are some very good official tutorials , that are definitely worth checking out, as well as two user guides (found inside the PhysiCell repository - we will talk about them later). However, these resources can be a bit overwhelming, and it may be difficult to understand where to start. Therefore, the goal of this wiki is to help you make the most of the official resources , by guiding you through them, while also providing some additional information that I wish I had had when I started using this piece of software. However, it does not replace PhysiCell's original documentation ! Here is a list of the topics we will focus on. Preferably, you should go through them in sequential order , but it is not essential. If you have a specific question, just go through the page that covers the topic you need to clarify. You can also find these links listed on the left side of the wiki. Info Before starting, check out the brief programming review to brush up on some concepts that will be useful when running simulations. PhysiCell basics An introduction to PhysiCell Running PhysiCell official examples Exploring the examples by changing the input parameters Writing and using custom model functions Creating your first model Data analysis and visualization tools PhysiCell's standard analysis and visualization tools Python-based data visualization with PhysiPy Running larger studies [Running local batch studies with replicates] [Running local parameter studies]","title":"Getting started"},{"location":"#physicell-basics","text":"An introduction to PhysiCell Running PhysiCell official examples Exploring the examples by changing the input parameters Writing and using custom model functions Creating your first model","title":"PhysiCell basics"},{"location":"#data-analysis-and-visualization-tools","text":"PhysiCell's standard analysis and visualization tools Python-based data visualization with PhysiPy","title":"Data analysis and visualization tools"},{"location":"#running-larger-studies","text":"[Running local batch studies with replicates] [Running local parameter studies]","title":"Running larger studies"},{"location":"programming-review/","text":"Programming review PhysiCell is a very complete piece of software, and you can most likely find some code similar to what you will need in one of PhysiCell's projects. However, it is a good idea to review some basic concepts before starting to dive deep into this framework. Basic command line commands PhysiCell runs in the command line , so you will need to know at least some basic commands in order to run your simulations. For a brief introduction on this topic, you can read this tutorial , or this one . In general, these are the commands you will use the most and that are worth remembering. # List the files in the current directory ls # Go into a specified folder cd folder-you-want-to-move-to # Go back to the previous folder cd .. # Remove file rm file-you-want-to-remove # Remove folders rm -r folder-you-want-to-remove # Move file mv file new-file-location # Move file into the current directory mv file . # Copy file cp file new-file-name You may also want to check out this shell scripting tutorial . C++ C++ is at the core of developing PhysiCell models. If you are at least somewhat familiar with the language, you will be able to understand PhysiCell's high-level code , as you can learn from the provided examples. However, as you dig deeper into the code and attempt to modify functionalities at its core, more knowledge about C++ may be required. In addition, PhysiCell's low-level code relies on a parallelization library known as OpenMP . Knowing how to use this library is not essential for most of the use cases, though. On the other hand, if you have no previous knowledge of C++ , you may need to study some references such as CPlusPlus.com or learncpp.com . Both these references are also recommended by PhysiCell's developers. Building C++ code Unlike some other programming languages, for which you simultaneously compile and run your code, in C++ you need to do it separately. PhysiCell offers a quick tutorial on how to set up your computer to compile C++ code. This is further discussed in the PhysiCell section of the wiki. The most important component to build the code is the Makefile . PhysiCell includes some custom make rules that are very useful (for instance, make data-cleanup will let you clean your directory by removing all the previous results data). These results are custom, so you can't just use Google to figure out what they do. You can, however, look into the Makefile file, where you will find these rules defined. So, if you are unsure about what rules there are, just look into this file. For instance, the definition for make data-cleanup is the following: data-cleanup: rm -rf ./output mkdir ./output touch ./output/empty.txt This basically tells us what the make data-cleanup command is doing. It deletes the output folder, creates a new one and places a blank txt file inside this folder ( touch is used to create an empty file). Instead of doing each of these steps manually every single time we want to clean our repository, this rule allows us to do it in a single line of code! For more information on Makefiles and how to interpret them, you can check this tutorial . Programming language for data analysis After running the simulations, it will be necessary to process and analyze the results. To do this, currently, the two best options are Python and MATLAB , as there are scripts for both these languages that allow you to easily read PhysiCell data. I personally prefer to use Python and all my code is written in Python, so there are more available resources for this language. However, you can choose between the two. In case you have no previous knowledge of either of them, I would strongly recommend learning Python as it is freely available and it is a very powerful tool. My suggestion would be to get familiar with the language and check some of my examples to learn how to apply it to your study.","title":"Programming review"},{"location":"programming-review/#programming-review","text":"PhysiCell is a very complete piece of software, and you can most likely find some code similar to what you will need in one of PhysiCell's projects. However, it is a good idea to review some basic concepts before starting to dive deep into this framework.","title":"Programming review"},{"location":"programming-review/#basic-command-line-commands","text":"PhysiCell runs in the command line , so you will need to know at least some basic commands in order to run your simulations. For a brief introduction on this topic, you can read this tutorial , or this one . In general, these are the commands you will use the most and that are worth remembering. # List the files in the current directory ls # Go into a specified folder cd folder-you-want-to-move-to # Go back to the previous folder cd .. # Remove file rm file-you-want-to-remove # Remove folders rm -r folder-you-want-to-remove # Move file mv file new-file-location # Move file into the current directory mv file . # Copy file cp file new-file-name You may also want to check out this shell scripting tutorial .","title":"Basic command line commands"},{"location":"programming-review/#c","text":"C++ is at the core of developing PhysiCell models. If you are at least somewhat familiar with the language, you will be able to understand PhysiCell's high-level code , as you can learn from the provided examples. However, as you dig deeper into the code and attempt to modify functionalities at its core, more knowledge about C++ may be required. In addition, PhysiCell's low-level code relies on a parallelization library known as OpenMP . Knowing how to use this library is not essential for most of the use cases, though. On the other hand, if you have no previous knowledge of C++ , you may need to study some references such as CPlusPlus.com or learncpp.com . Both these references are also recommended by PhysiCell's developers.","title":"C++"},{"location":"programming-review/#building-c-code","text":"Unlike some other programming languages, for which you simultaneously compile and run your code, in C++ you need to do it separately. PhysiCell offers a quick tutorial on how to set up your computer to compile C++ code. This is further discussed in the PhysiCell section of the wiki. The most important component to build the code is the Makefile . PhysiCell includes some custom make rules that are very useful (for instance, make data-cleanup will let you clean your directory by removing all the previous results data). These results are custom, so you can't just use Google to figure out what they do. You can, however, look into the Makefile file, where you will find these rules defined. So, if you are unsure about what rules there are, just look into this file. For instance, the definition for make data-cleanup is the following: data-cleanup: rm -rf ./output mkdir ./output touch ./output/empty.txt This basically tells us what the make data-cleanup command is doing. It deletes the output folder, creates a new one and places a blank txt file inside this folder ( touch is used to create an empty file). Instead of doing each of these steps manually every single time we want to clean our repository, this rule allows us to do it in a single line of code! For more information on Makefiles and how to interpret them, you can check this tutorial .","title":"Building C++ code"},{"location":"programming-review/#programming-language-for-data-analysis","text":"After running the simulations, it will be necessary to process and analyze the results. To do this, currently, the two best options are Python and MATLAB , as there are scripts for both these languages that allow you to easily read PhysiCell data. I personally prefer to use Python and all my code is written in Python, so there are more available resources for this language. However, you can choose between the two. In case you have no previous knowledge of either of them, I would strongly recommend learning Python as it is freely available and it is a very powerful tool. My suggestion would be to get familiar with the language and check some of my examples to learn how to apply it to your study.","title":"Programming language for data analysis"},{"location":"basics/changing-input/","text":"The first and easiest way to modify the sample projects code is to change some of the model parameters . As explained in the previous section, all the code that differentiates a sample project from another can be found either in the config or the custom folder. In this section, we will focus on the configuration file. At this point, it is a good idea to open PhysiCell's User Guide (available in the documentation folder of your repository) to better understand what you can do with PhysiCell. Through this section, I will point out some of the chapters as suggested reading. You can start with chapter 13 . The PhysiCell_settings.xml file This is an XML-based file where general simulation parameters are defined. You can think of this file as an input parameter of your model. You do not need to recompile your project if you make changes to this file, as it does not change how the model works, and it only changes the numerical values that define each parameter. This file can be divided into 4 main categories: - General simulation parameters - here you define the size of the domain, the length of the simulation, what to save in your inputs,... - Microenvironment parameters - here you define the substances that you want to include in your simulation - Cell definition parameters - here you define the cells you want to include in your simulation, based on the standard PhysiCell definitions - User parameters - here you can define custom variables that are not part of the standard PhysiCell workflow but you will use in your custom functions General parameters This section is fairly easy to understand and work with. - The domain variables define the size of the domain. You can also define whether the model is 2D or 3D. - The overall variables define simulation times. For most use cases, you only need to change the max_time variable to define the length of the simulations. You can leave the others as they are (more information on this is available below). - The parallel variables define the number of cores to use during code parallelization. For a regular computer, the value should be left as 4. For larger machines, such as the M2BE cluster, this value can be increased. - The save variables allow you to define the results to save and where to save them. You can choose to save cell plots (in SVG) and cell data (in .mat files). To know more about the available output formats, check out chapter 14 of the User Guide . - The options variables define additional aspects. For instance, you can define whether the edges of the domain should act as walls, bouncing the cells off when they touch, or if the cells should be left at the edge of the domain. Variables marked as legacy are not used in the newest version of the code. diffusion_dt is the step size used in the diffusion solver , including the secretion/export and uptake processes. The default value is 0.01 min. mechanics_dt is the step size for the cell mechanics solver , including cell motility. Each cell\u2019s custom function is also evaluated on this time scale. The default value is 0.1 min. phenotype_dt is the step size for phenotype processes (e.g., cycle progression, volume changes). The default value is 6 min. Click here to learn more about the time steps in PhysiCell Microenvironment parameters Check out the official tutorial . Also, check chapter 8 of the User Guide . Cell definitions parameters This is a new addition to the configuration file, so it is not covered in the User Guide yet. There are also a lot of parameters to go through here, so the best option is to read chapters 9, 10 and 11 of the User Guide, which go through the Cell object in PhysiCell. Once you are aware of how cells are defined, you can open the configuration file of one of the newest projects (for instance, the worm project) and you should be able to understand how to modify the input value of the cell definition parameters. To learn how to define multiple types of cells, check out the configuration file of the predator_prey_farmer project. User parameters Check out the official tutorial . Note that this tutorial also goes through how you can access these variables in your code. If you do not feel comfortable with the code yet, you can disregard this part of the tutorial. The cells.csv file This is also a new addition to the PhysiCell workflow. The idea here is to define the coordinates of the initial cells, so that you can test different spatial configurations without having to recompile the code. However, this feature is still in development, so we will disregard this and define the initial coordinates in the custom.cpp file.","title":"Changing input parameters"},{"location":"basics/changing-input/#the-physicell_settingsxml-file","text":"This is an XML-based file where general simulation parameters are defined. You can think of this file as an input parameter of your model. You do not need to recompile your project if you make changes to this file, as it does not change how the model works, and it only changes the numerical values that define each parameter. This file can be divided into 4 main categories: - General simulation parameters - here you define the size of the domain, the length of the simulation, what to save in your inputs,... - Microenvironment parameters - here you define the substances that you want to include in your simulation - Cell definition parameters - here you define the cells you want to include in your simulation, based on the standard PhysiCell definitions - User parameters - here you can define custom variables that are not part of the standard PhysiCell workflow but you will use in your custom functions","title":"The PhysiCell_settings.xml file"},{"location":"basics/changing-input/#general-parameters","text":"This section is fairly easy to understand and work with. - The domain variables define the size of the domain. You can also define whether the model is 2D or 3D. - The overall variables define simulation times. For most use cases, you only need to change the max_time variable to define the length of the simulations. You can leave the others as they are (more information on this is available below). - The parallel variables define the number of cores to use during code parallelization. For a regular computer, the value should be left as 4. For larger machines, such as the M2BE cluster, this value can be increased. - The save variables allow you to define the results to save and where to save them. You can choose to save cell plots (in SVG) and cell data (in .mat files). To know more about the available output formats, check out chapter 14 of the User Guide . - The options variables define additional aspects. For instance, you can define whether the edges of the domain should act as walls, bouncing the cells off when they touch, or if the cells should be left at the edge of the domain. Variables marked as legacy are not used in the newest version of the code. diffusion_dt is the step size used in the diffusion solver , including the secretion/export and uptake processes. The default value is 0.01 min. mechanics_dt is the step size for the cell mechanics solver , including cell motility. Each cell\u2019s custom function is also evaluated on this time scale. The default value is 0.1 min. phenotype_dt is the step size for phenotype processes (e.g., cycle progression, volume changes). The default value is 6 min. Click here to learn more about the time steps in PhysiCell","title":"General parameters"},{"location":"basics/changing-input/#microenvironment-parameters","text":"Check out the official tutorial . Also, check chapter 8 of the User Guide .","title":"Microenvironment parameters"},{"location":"basics/changing-input/#cell-definitions-parameters","text":"This is a new addition to the configuration file, so it is not covered in the User Guide yet. There are also a lot of parameters to go through here, so the best option is to read chapters 9, 10 and 11 of the User Guide, which go through the Cell object in PhysiCell. Once you are aware of how cells are defined, you can open the configuration file of one of the newest projects (for instance, the worm project) and you should be able to understand how to modify the input value of the cell definition parameters. To learn how to define multiple types of cells, check out the configuration file of the predator_prey_farmer project.","title":"Cell definitions parameters"},{"location":"basics/changing-input/#user-parameters","text":"Check out the official tutorial . Note that this tutorial also goes through how you can access these variables in your code. If you do not feel comfortable with the code yet, you can disregard this part of the tutorial.","title":"User parameters"},{"location":"basics/changing-input/#the-cellscsv-file","text":"This is also a new addition to the PhysiCell workflow. The idea here is to define the coordinates of the initial cells, so that you can test different spatial configurations without having to recompile the code. However, this feature is still in development, so we will disregard this and define the initial coordinates in the custom.cpp file.","title":"The cells.csv file"},{"location":"basics/custom-functions/","text":"When you need your model to go further than changing the numerical values of your input parameters, it's time to make some changes to the custom functions that define how the model behaves . This is done in the custom.cpp and custom.h files. The custom.cpp file","title":"Custom functions"},{"location":"basics/custom-functions/#the-customcpp-file","text":"","title":"The custom.cpp file"},{"location":"basics/first-model/","text":"You now have all the required knowledge to create your own model. However, to simplify the process, I recommend following this workflow. Starting with a template PhysiCell provides you with many project templates, and it is totally OK to use them as a starting point. That is why they are there! So, go ahead and think about which one you would like to work it. Personally, I like starting from a blank canvas and use the template project, but you can start where you want. Just go ahead and populate your project with the necessary files by calling make template . Modifying your code and compiling it Do all the necessary changes to your code and compile the project by calling make . Do not be afraid of using the User Guide and other examples to build your custom functions. In case you make further changes to the code, you will need to recompile it. You do not usually need to recompile all of the files, so you just have to call make . However, if some strange error occurs, you can try cleaning the compiled files and start from scratch. You can use make clean for this. Do not confuse make clean with the make reset one! You have to be quite careful with your code when using make reset . This will delete all of the code in your main directory. To be safe, I recommend always having a backup of your code or, even better, using Git.","title":"Your first model"},{"location":"basics/first-model/#starting-with-a-template","text":"PhysiCell provides you with many project templates, and it is totally OK to use them as a starting point. That is why they are there! So, go ahead and think about which one you would like to work it. Personally, I like starting from a blank canvas and use the template project, but you can start where you want. Just go ahead and populate your project with the necessary files by calling make template .","title":"Starting with a template"},{"location":"basics/first-model/#modifying-your-code-and-compiling-it","text":"Do all the necessary changes to your code and compile the project by calling make . Do not be afraid of using the User Guide and other examples to build your custom functions. In case you make further changes to the code, you will need to recompile it. You do not usually need to recompile all of the files, so you just have to call make . However, if some strange error occurs, you can try cleaning the compiled files and start from scratch. You can use make clean for this. Do not confuse make clean with the make reset one! You have to be quite careful with your code when using make reset . This will delete all of the code in your main directory. To be safe, I recommend always having a backup of your code or, even better, using Git.","title":"Modifying your code and compiling it"},{"location":"basics/introduction/","text":"Main resources In my opinion, the most \"user-friendly\" way of getting to know PhysiCell is to watch one of the lectures taught by Paul Macklin , PhysiCell's main investigator: You can also check his YouTube account for some additional videos of PhysiCell simulations. Next, you should take a look at the original publication . Don't worry, you do not need to understand every single detail at first (and you won't need to in order to work with the code). Yet, it is very important that you are aware of what PhysiCell is and what it can do, so read the paper and try to at least retain this information. When you feel like you can start a more \"hands-on\" approach , you will need to get the PhysiCell code. You can find the most recent release of the code on their website , or through their GitHub page . Check the next page for the following steps!","title":"An introduction to PhysiCell"},{"location":"basics/introduction/#main-resources","text":"In my opinion, the most \"user-friendly\" way of getting to know PhysiCell is to watch one of the lectures taught by Paul Macklin , PhysiCell's main investigator: You can also check his YouTube account for some additional videos of PhysiCell simulations. Next, you should take a look at the original publication . Don't worry, you do not need to understand every single detail at first (and you won't need to in order to work with the code). Yet, it is very important that you are aware of what PhysiCell is and what it can do, so read the paper and try to at least retain this information. When you feel like you can start a more \"hands-on\" approach , you will need to get the PhysiCell code. You can find the most recent release of the code on their website , or through their GitHub page . Check the next page for the following steps!","title":"Main resources"},{"location":"basics/running-examples/","text":"Now that you have download the code, you can see that are a lot of folders and files to look at. Before simulating anything, though, you will need to assure that your computer is ready to build the simulations. Setting up your local machine Check out the available tutorials for setting up your system on Windows and MacOS . Running your first simulation I suggest that you read the Quickstart.pdf file, which is located in the main folder. This is the best way to learn what you need to do in order to run simulations on your computer, and also to build and run your first simulation. Try following this guide to run any (or all) of the provided examples. Do not focus on the \"Visualizing Output\" section for now. It shows that there are multiple tools that you can use to look into the data. You do not need to use them all, though! You should think about your problem and what variables you want to analyze, and choose the framework that works best for that use case. We'll discuss this later in the data analysis section of the wiki. For now, you can visualize your results using the first method mentioned in the Quickstart guide: the SVG plots drawn by PhysiCell. This is not a perfect tool, as it does not capture the 3D nature of the models, but it is good enough for a start. Keep in mind that a common PhysiCell project only requires you to work directly with two groups of files: the configuration file found in the config folder and the custom.cpp and custom.h files found in the custom folder . These files are what make your model different from any other PhysiCell model and allow you to define how your model should behave. The rest of the code defines functions that allow your model to run, but are not specific. Of course, you can take a look into the code found in the other folders in order to understand the framework, but it can be overwhelming to do so right after downloading a code. I only recommend it after you are comfortable with a simple model. For a brief description of the code structure, you can check out chapter 5 of the PhysiCell User Guide (available in the documentation folder of your repository). Understanding the makefile rules Following the Quickstart guide, you will be able to run some simulations that have been created and coded previously. All of these projects rely on the core PhysiCell code, but each of them may use different standard functions, and it is even possible that they include new functions, that are not part of PhysiCell's core code. Looking at the Makefile file, in which all the makefile rules are defined, we conclude that all of the make rules for the projects follow a similar structure. Namely, they copy the files found in the folder that corresponds to the chosen project and place them in the main folder. For instance, let's consider the rule for the template3D project. template3D: cp ./sample_projects/template3D/custom_modules/* ./custom_modules/ touch main.cpp && cp main.cpp main-backup.cpp cp ./sample_projects/template3D/main-3D.cpp ./main.cpp cp Makefile Makefile-backup cp ./sample_projects/template3D/Makefile . cp ./config/PhysiCell_settings.xml ./config/PhysiCell_settings-backup.xml cp ./sample_projects/template3D/config/* ./config/ Here, the program is copying the following files: Configuration files - these files define model input parameters. Custom files - these define custom functions that are specific to the project. Build files - these files define how the model should run and be built. Once these files have been copied, the main directory is ready for us to build and run the model. Now, the command make can be called, which will build the project and create an executable file with which we can run the model. Thus, we should not make changes to the code in the sample_projects folder . These are the templates of our simulations and, once we change them, they will not behave in the same way as described in the PhysiCell guides. All changes should be made to the code found in the main directory, inside the config and custom folders. We will learn how to do this in the next section.","title":"Running examples"},{"location":"basics/running-examples/#setting-up-your-local-machine","text":"Check out the available tutorials for setting up your system on Windows and MacOS .","title":"Setting up your local machine"},{"location":"basics/running-examples/#running-your-first-simulation","text":"I suggest that you read the Quickstart.pdf file, which is located in the main folder. This is the best way to learn what you need to do in order to run simulations on your computer, and also to build and run your first simulation. Try following this guide to run any (or all) of the provided examples. Do not focus on the \"Visualizing Output\" section for now. It shows that there are multiple tools that you can use to look into the data. You do not need to use them all, though! You should think about your problem and what variables you want to analyze, and choose the framework that works best for that use case. We'll discuss this later in the data analysis section of the wiki. For now, you can visualize your results using the first method mentioned in the Quickstart guide: the SVG plots drawn by PhysiCell. This is not a perfect tool, as it does not capture the 3D nature of the models, but it is good enough for a start. Keep in mind that a common PhysiCell project only requires you to work directly with two groups of files: the configuration file found in the config folder and the custom.cpp and custom.h files found in the custom folder . These files are what make your model different from any other PhysiCell model and allow you to define how your model should behave. The rest of the code defines functions that allow your model to run, but are not specific. Of course, you can take a look into the code found in the other folders in order to understand the framework, but it can be overwhelming to do so right after downloading a code. I only recommend it after you are comfortable with a simple model. For a brief description of the code structure, you can check out chapter 5 of the PhysiCell User Guide (available in the documentation folder of your repository).","title":"Running your first simulation"},{"location":"basics/running-examples/#understanding-the-makefile-rules","text":"Following the Quickstart guide, you will be able to run some simulations that have been created and coded previously. All of these projects rely on the core PhysiCell code, but each of them may use different standard functions, and it is even possible that they include new functions, that are not part of PhysiCell's core code. Looking at the Makefile file, in which all the makefile rules are defined, we conclude that all of the make rules for the projects follow a similar structure. Namely, they copy the files found in the folder that corresponds to the chosen project and place them in the main folder. For instance, let's consider the rule for the template3D project. template3D: cp ./sample_projects/template3D/custom_modules/* ./custom_modules/ touch main.cpp && cp main.cpp main-backup.cpp cp ./sample_projects/template3D/main-3D.cpp ./main.cpp cp Makefile Makefile-backup cp ./sample_projects/template3D/Makefile . cp ./config/PhysiCell_settings.xml ./config/PhysiCell_settings-backup.xml cp ./sample_projects/template3D/config/* ./config/ Here, the program is copying the following files: Configuration files - these files define model input parameters. Custom files - these define custom functions that are specific to the project. Build files - these files define how the model should run and be built. Once these files have been copied, the main directory is ready for us to build and run the model. Now, the command make can be called, which will build the project and create an executable file with which we can run the model. Thus, we should not make changes to the code in the sample_projects folder . These are the templates of our simulations and, once we change them, they will not behave in the same way as described in the PhysiCell guides. All changes should be made to the code found in the main directory, inside the config and custom folders. We will learn how to do this in the next section.","title":"Understanding the makefile rules"},{"location":"data/physipy/","text":"You can find the PhysiPy module here . For some examples on how to use this tool, check the Jupyter Notebooks found on this GitHub repository .","title":"PhysiPy"},{"location":"data/standard-tools/","text":"There are many options when it comes to analyzing your PhysiCell results. Mainly, there are two categories: tools for data processing and for data visualization . However, some of the presented frameworks can be used to achieve both types of analysis. There is no definite answer to the questions \"Which tool is the best?\" or \"What framework should I use?\", as this depends on what you are trying to achieve, as well as your previous knowledge and experience with the available tools. Thus, here we'll go through some of the options to illustrate their potential, and make this choice a bit easier. Data analysis (and some visualization) When it comes to processing data, both Python and MATLAB can be used. Currently, my focus is placed on Python, as this is an open-source language and is more accessible to general users. However, if you feel more comfortable with MATLAB, you can choose to do so and adapt some of our Python functions, or implement new features. Python PhysiCell developers have introduced tool, called python-loader , that allows you to load the data from an output file into a Python object, called pyMCDS . Despite being quite good for exploratory data analysis , as all outputs are stored in the pyMCDS data structure, this also makes pyMCDS a bit too slow for processing large amounts of data . Hence, we have built some custom functions for specific routines, that scale much better. For more information, check the section on PhysiPy . MATLAB Just like the python-loader module, there are also scripts built by the PhysiCell developers that allow you to load data into MATLAB . These can be found here , alongside a tutorial that demonstrates how the data can be processed and visualized once it has been loaded. Data Visualization ParaView ParaView is a great tool to use when you want to look into your cell data to understand what it looks like. Using PhysiCell's ParaView routines , you will be able to load the data from an output file and automatically render it to a 3D object that can be interacted with. Nevertheless, this tutorial has some mistakes! Here are some of the issues I have found: POVWriter POVWriter is not as flexible as ParaView, as it renders data into a static image and not an interactable object. However, it offers high-quality renderings of your results. Plus, it can be programmed to adapt to your own style and you can use some simple additional tools to create animations. Check PhysiCell's tutorial for more information on how to use this tool.","title":"Standard tools"},{"location":"data/standard-tools/#data-analysis-and-some-visualization","text":"When it comes to processing data, both Python and MATLAB can be used. Currently, my focus is placed on Python, as this is an open-source language and is more accessible to general users. However, if you feel more comfortable with MATLAB, you can choose to do so and adapt some of our Python functions, or implement new features.","title":"Data analysis (and some visualization)"},{"location":"data/standard-tools/#python","text":"PhysiCell developers have introduced tool, called python-loader , that allows you to load the data from an output file into a Python object, called pyMCDS . Despite being quite good for exploratory data analysis , as all outputs are stored in the pyMCDS data structure, this also makes pyMCDS a bit too slow for processing large amounts of data . Hence, we have built some custom functions for specific routines, that scale much better. For more information, check the section on PhysiPy .","title":"Python"},{"location":"data/standard-tools/#matlab","text":"Just like the python-loader module, there are also scripts built by the PhysiCell developers that allow you to load data into MATLAB . These can be found here , alongside a tutorial that demonstrates how the data can be processed and visualized once it has been loaded.","title":"MATLAB"},{"location":"data/standard-tools/#data-visualization","text":"","title":"Data Visualization"},{"location":"data/standard-tools/#paraview","text":"ParaView is a great tool to use when you want to look into your cell data to understand what it looks like. Using PhysiCell's ParaView routines , you will be able to load the data from an output file and automatically render it to a 3D object that can be interacted with. Nevertheless, this tutorial has some mistakes! Here are some of the issues I have found:","title":"ParaView"},{"location":"data/standard-tools/#povwriter","text":"POVWriter is not as flexible as ParaView, as it renders data into a static image and not an interactable object. However, it offers high-quality renderings of your results. Plus, it can be programmed to adapt to your own style and you can use some simple additional tools to create animations. Check PhysiCell's tutorial for more information on how to use this tool.","title":"POVWriter"},{"location":"scaling/batch/","text":"By now, you should be able to run some simulations on your local machine. However, once you feel comfortable with your model and with the PhysiCell workflow, you may feel the need to automate some parts of the process, so that you can worry less about running the simulations and start focusing more on understanding the results . For instance, you will probably need to run multiple replicates in order to test the model and guarantee that the results are consistent . Of course, this can be done manually , by running the simulation, saving the output results to another folder, and repeating this process as many times as necessary to get the number of replicates you need. However, it is much more efficient to automate this process . Consider the following sections as suggestions. You can follow this structure to get the basic ideas, but you may adapt them to your own workflow. i.g., here we will start with compiled code, but you may want to start your batching process by compiling your code, and that is also a valid option. Feel free to experiment with the code to optimize your routines! Basic project structure Before running the simulations, you should prepare the structure of your project: First of all, you must assure that your PhysiCell is already compiled Secondly, you must create a new folder , in which you will place your PhysiCell folder So, starting with a folder called \"physicell-batch\", its structure should look like this: physicell-batch |- PhysiCell/ |- *Your PhysiCell code* Running replicates If you are aiming to simply run a number of replicates, all of which share the same initial conditions , a simple shell script can be used. This will tell your machine what to do, and will be placed in our main folder. Let's create it and call it runReplicates.sh. Now the structure should look like this: physicell-batch |- PhysiCell/ |- *Your PhysiCell code* |- runReplicates.sh Now, in order to build our routine, we know that we will want to run our executable (let's assume we are running project3D.exe) and then move the output files elsewhere , so that they are not overwritten in the next iteration. Thus, we can start our bash file by creating this folder, using mkdir . We will keep it in our main directory. #!/bin/bash # Create results folder folderName = 'results' mkdir $folderName Now, we can move to the PhysiCell folder (using cd ) and start looping between running simulations and saving the results. We can use a for loop to do so, and, for this example, we will assume we are running 3 replicates. To save the results, we will create a specific subfolder in the folder we create at the start of the script, indicating the replicate ID . Subsequently, we will copy the output files to this directory ( cp -r , to copy files recursively). Finally, we can clean the output folder ( make data-cleanup ) to avoid getting mixed data, in case something fails. Translating this into code, we get: cd PhysiCell # Loop through 3 replicates for i in $( seq 3 ) # (Generates a sequence from 1 to 3) do # Run simulation ./project3D # Create specific folder for the results mkdir ../ $folderName /output $i # Copy results from output to new folder cp -r output/. ../ $folderName /output $i # Empty output folder make data-cleanup done And, it's done! \ud83e\udd73 Now you can run your runReplicates.sh script and your project will now look something like this, with all your replicates results. physicell-batch |- PhysiCell/ |- *Your PhysiCell code* |- results/ |- output1/ |- *Results from simulation 1* |- output2/ |- output3/ |- runReplicates.sh","title":"Batch simulations"},{"location":"scaling/batch/#basic-project-structure","text":"Before running the simulations, you should prepare the structure of your project: First of all, you must assure that your PhysiCell is already compiled Secondly, you must create a new folder , in which you will place your PhysiCell folder So, starting with a folder called \"physicell-batch\", its structure should look like this: physicell-batch |- PhysiCell/ |- *Your PhysiCell code*","title":"Basic project structure"},{"location":"scaling/batch/#running-replicates","text":"If you are aiming to simply run a number of replicates, all of which share the same initial conditions , a simple shell script can be used. This will tell your machine what to do, and will be placed in our main folder. Let's create it and call it runReplicates.sh. Now the structure should look like this: physicell-batch |- PhysiCell/ |- *Your PhysiCell code* |- runReplicates.sh Now, in order to build our routine, we know that we will want to run our executable (let's assume we are running project3D.exe) and then move the output files elsewhere , so that they are not overwritten in the next iteration. Thus, we can start our bash file by creating this folder, using mkdir . We will keep it in our main directory. #!/bin/bash # Create results folder folderName = 'results' mkdir $folderName Now, we can move to the PhysiCell folder (using cd ) and start looping between running simulations and saving the results. We can use a for loop to do so, and, for this example, we will assume we are running 3 replicates. To save the results, we will create a specific subfolder in the folder we create at the start of the script, indicating the replicate ID . Subsequently, we will copy the output files to this directory ( cp -r , to copy files recursively). Finally, we can clean the output folder ( make data-cleanup ) to avoid getting mixed data, in case something fails. Translating this into code, we get: cd PhysiCell # Loop through 3 replicates for i in $( seq 3 ) # (Generates a sequence from 1 to 3) do # Run simulation ./project3D # Create specific folder for the results mkdir ../ $folderName /output $i # Copy results from output to new folder cp -r output/. ../ $folderName /output $i # Empty output folder make data-cleanup done And, it's done! \ud83e\udd73 Now you can run your runReplicates.sh script and your project will now look something like this, with all your replicates results. physicell-batch |- PhysiCell/ |- *Your PhysiCell code* |- results/ |- output1/ |- *Results from simulation 1* |- output2/ |- output3/ |- runReplicates.sh","title":"Running replicates"},{"location":"scaling/parameter-studies/","text":"Although running replicates may be useful, sometimes you may also want to run your project, make slight changes to the code, and then run it again , with these new conditions. This is particularly helpful in parameter studies . Instead of making these changes manually, you can automate this action by building a script that modifies the XML PhysiCell configuration file according to the parameters you want to vary. As an example, let's assume we want to run a study with two different collagen concentrations. Using Python , we can create a simple script (change_settings.py) that: Receives the value we want the collagen concentration parameter to assume; Opens the XML file; Writes this value and saves the file. import sys # To read the terminal inputs from xml.etree import ElementTree as et # To change the XML file # Variable definition folder_name = 'config/' file_name = \"PhysiCell_settings.xml\" modified_element = \"microenvironment_setup/variable[@name='ECM']/initial_condition\" # Read and update file tree = et . parse ( folder_name + file_name ) tree . find ( modified_element ) . text = str ( sys . argv [ 1 ]) tree . write ( folder_name + file_name ) Then, we can adapt our previously developed bash script #!/bin/bash # Create results folder folderName = 'results' mkdir $folderName # Define density values [mg/mL] densityValues =[ 4 , 6 ] cd PhysiCell # Loop through densities for d in $( seq 3 ) do # Change XML with Python python change_settings.py $densityValues [ d ] # Run simulation ./project3D # Create specific folder for the results mkdir ../ $folderName /density_ $i # Copy results from output to new folder cp -r output/. ../ $folderName /density_ $i # Empty output folder make data-cleanup done Of course, you can modify our Python file to adapt to any of the possible parameters, by changing the modified_element . Or, even better, you can extend the script to receive two arguments: the parameter to be changed and its corresponding value. Maybe even two lists... The possibilities are endless!","title":"Parameter studies"}]}